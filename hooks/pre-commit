#!/bin/lua
--------------------------------------------------------------------
-- BandRich Git pre-commit hook
-- Copyright 2013, BandRich Inc.
-- v1.1.1
-- @Data: 20130717
--------------------------------------------------------------------

local error_tbl = {}
result=true

-- split string
function string:split(sep)
    local sep, fields = sep or ":", {}
    local pattern = string.format("([^%s]+)", sep)
    self:gsub(pattern, function(c) fields[#fields+1] = c end)
    return fields
end

--[[
git diff --cached --name-status
git diff --cached --name-only
git diff --cached --name-status | awk '$1 != "R" { print $2 }'
git diff --cached --name-only --diff-filter=ACM
]]

-- file names in the current commit (except removed)
local pipe = io.popen('git diff --cached --name-only --diff-filter=ACM', 'r')
local file_names = pipe:read '*a'
pipe:close()

-- Start to validate
print("\nValidating JavaScript:")
for num, file_name in ipairs(file_names:split("\n")) do
	--[ watching javascripts
    if file_name:match("%.js$") then
		local check = io.popen(string.format('jshint %s', file_name), 'r')
		msg = check:read("*a")
		if string.len(msg) ~= 0 then
			table.insert(error_tbl, string.format("%s:\n%s", file_name, msg))
			result=false
		else
			print ("[PASS] " .. file_name)
		end
    end
end
print("\nJavaScript validation complete!\n")

-- if exit status other then 0 commit will fail
-- in an emergency the hook can be bypassed by passing â€“no-verify:
-- $ git commit --no-verify ...
if result then
	-- exit success
	os.exit(0)
end

-- print error list
for i = 1, #error_tbl do
	print "------------------"
	print("[FAIL] " .. error_tbl[i])
end

-- exit failure
print("\nPlease modify your code before commit, thanks!")
os.exit(1)
